#!/usr/bin/env bash
if [ ! -d info ];then
    echo "You are not inside an Application or Application-wrapper directory"
    exit 1
fi

if [ -f ~/bin/build-deb ]; then
    echo "You still have an old version of build-deb in your ~/bin. Please delete it"
fi 

MY_CHECKSUM=$(md5sum ${0} |cut -f1 -d' ')
LOCAL_CHECKSUM=$(md5sum info/bin/build-deb |cut -f1 -d' ')

if [[ $MY_CHECKSUM != $LOCAL_CHECKSUM ]]; then
    echo "Local build script differs from Master, using that instead."
    bash info/bin/build-deb
    exit $?
fi

if [ ! -f info/BUILD_VERSION ]; then
    # I _think_ this is how Jenkins is going to function
    if [ "$BUILD_VERSION" == "" ]; then
        echo "BUILD_VERSION:"
        read BUILD_VERSION
    else
        echo "building version $BUILD_VERSION"
    fi
fi

PACKAGE_NAME=`cat info/NAME`
PACKAGE_DESC=`cat info/DESCRIPTION`
PACKAGE_URL=`cat info/URL`
PACKAGE_VERS=`cat info/VERSION`

if [[ $PACKAGE_NAME == *wrapper* ]]; then
    PACKAGE_ARCH=`cat info/ARCH`
else
    PACKAGE_ARCH=`uname -m`
fi
PACKAGE_TARGET_PLATFORM=$( cat /etc/lsb-release |grep DISTRIB_CODENAME|cut -d'=' -f2)

#Jenkins uses build_number we use version..
if [ -z "$BUILD_NUMBER" ]
then 
    PACKAGE_BUILD_VERSION=`cat info/BUILD_VERSION`
else
    PACKAGE_BUILD_VERSION=$BUILD_NUMBER
fi

SRC_DIRS=$(ls -m src/|sed 's/,/ /g')

fpm -n $PACKAGE_NAME \
   -v $PACKAGE_VERS \
   -a $PACKAGE_ARCH \
   -s dir \
   -C src \
   -t deb \
   --deb-user root \
   --deb-group root \
   --url "$PACKAGE_URL" \
   --description "$PACKAGE_DESC" \
   --iteration "baseblack-r$PACKAGE_BUILD_VERSION" \
   --replaces "$PACKAGE_NAME (<< $PACKAGE_VERS)" ${SRC_DIRS}

echo `expr ${PACKAGE_BUILD_VERSION} + 1` > info/BUILD_VERSION

exit ${PIPESTATUS[0]}
